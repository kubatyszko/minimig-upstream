	AS32.EXE - Motorola Freeware 68332 Cross Assembler
                Updated to version 1.2 - November 1990

				GENERAL

Command line format:
as32 [-options ...] file1[.s] [file2[.s] ...]

Command line options can be one of the following:

-l              enable listing output (default is no listing output)
                (this was finally fixed on version 1.2)

-f              default size for forward references is long (normally word)

-s              generate symbol file 'file1.sym'

Command line arguments specify the filenames to assemble. The `S1'
formatted object file is placed on file `file1.s19', the listing and
error messages are written to the standard output.

The listing file contains the address and bytes assembled for each line
of input followed by the original input line (unchanged, but moved over
to the right some).  If an input line causes more than 6 bytes to be
output (e.g. a long DC.B directive), additional bytes up to 64) are
listed on succeding lines with no address preceding them.

The symbol file (if enabled by '-s' command line option) is a text file
with the same filename as the first input file specified, with filename
extension set to '.sym'.  This is a text file which contains the value
of each user-defined symbol in the input files.  The lines in the file
have the following form:

set <symbol> <value>

The <value> is a hex constant of varying length, preceeded by '0x'.  The
<symbol> is the symbol exactly as specified in the user program.  This
is a new feature in version 1.2.


        ====================================================

Equates cause the value of the expression to replace the address field
in the listing.  Equates that have forward references cause Phasing
Errors in Pass 2.

Expressions may consist of symbols, constants or the character '*'
denoting the current value of the program counter) joined together by
one of the operators: +-*/%&|^~.  The operators are the same as in C:

		+       add
		-       subtract
		*       multiply
		/       divide
		%       remainder after division
		&       bitwise and
		|       bitwise or
		^       bitwise exclusive-or
		~	bitwise not

Expressions are evaluated left to right; there is no provision for
operator precedence although parenthesized expressions are allowed.
Arithmetic is carried out in signed 32-bit twos-complement integer
precision.

Constants are constructed with the same syntax as the Motorola
Microsystems assembler:

		$       followed by hexadecimal constant
		@       followed by octal constant
		%       followed by binary constant
		digit   decimal constant

String constants are specified by enclosing the string in single quotes.
Multi-character strings are only recognized by the DC pseudo-op.  Single
characters surrounded by single quotes can be used in any expression;
the resulting value will be the ASCII value of the character.
Multi-character strings cannot be used in expressions except in the DC
psuedo op.

				ERRORS

Error diagnostics are placed in the listing file just before the
line containing the error.  Format of the error line is:

		Line_number: Description of error
			or
		Line_number: Warning --- Description of error

Errors of the first type in pass one cause cancellation of pass two.
Warnings do not cause cancellation of pass two but should cause you to
wonder where they came from.

Error messages are meant to be self-explanatory.

If more than one file is being assembled, the file name precedes
the error:

		File_name,Line_number: Description of error

Finally, some errors are classed as fatal and cause an immediate
termination of the assembly.  Generally these errors occur when a
temporary file cannot be created or is lost during the assembly. Consult
your local guru if this happens.

The exit status of the assembler ($status for csh users) is equal to the
number of errors detected during the assembly.


			    DIFFERENCES

Even byte alignment on instructions is not checked.  If you're worried
about this, try the 'even' pseudo-op in front of every code section.

Macros are not supported.  (try M4 or M6)

Structured assembler constructs are not supported. (try C)

Microsystems assemblers require parentheses when specifying word or long
addressing modes.  This assembler assumes that no symbol will end with
.w or .l

The mnemonics used in this assembler follow the 68332 User's Manuals.
This assembler is intended to be very compatible with the Motorola 68XXX
assembler released under MS-DOS/PC-DOS.

	The pseudo-ops are:

		org
		even
		equ
		dc              Define constant(s)
		ds              Define storage
		opt
		include         Filename argument is included
		section		switch to specified program section (0-15)

	The OPT pseudo-op allows the following operands:

		list    Turn on output listing (default)
		nolist  Turn off output listing
		brl     Force forward refs long (default is word)

	Some of the more common pseudo-ops are not present:

		spc     Use blank lines instead
		pag[e]  Use a comment with cntrl-L imbeded
		end     The assembly ends when there is no more input
		ttl     use `pr' to get headings and page numbers
		nam[e]  Did you ever use this one anyway?
		xref
		xdef
		idnt
                p=68xxx

	The above pseudo-ops are recognized, but ignored.

				DETAILS

Symbol:  A string of  characters  with a non-initial digit. The Symbols
start with an alphabetic character or _. the reset of the characters may
be from the set:

			   [a-z][A-Z]_[0-9]$

(_ counts as a non-digit).  The `$' counts as a digit to avoid confusion
with hexadecimal constants.  All characters of a symbol are significant,
with upper and lower case characters being distinct.  The maximum number
of characters in a symbol is currently set at 30.

The symbol table can grow until the assembler runs out of memory.

Label:  A symbol starting in the first column is a  label  and  may
optionally  be  ended  with a ':'.  A label may appear on a line by
itself and is then interpreted as:

			Label   EQU     *

Mnemonic:  A symbol preceded by at least one whitespace  character.
Upper  case characters in this field are converted to lower case before
being checked as a legal mnemonic.  Thus `nop', NOP' and even `NoP' are
recognized as the same mnemonic.

Operand:  Follows mnemonic, separated by at  least  one  whitespace
character.   The   contents   of   the   operand  field  is interpreted
by each instruction.

Whitespace: A blank or a tab

Comment:  Any text after all operands for  a  given  mnemonic  have been
processed or, a line beginning with '*' up to the end of line or, an
empty line.

Continuations:  If a line ends with a backslash (\) then  the  next line
is  fetched  and  added to the end of the first line. This continues
until a line is seen which doesn't end in  \ or  until  MAXBUF
characters have been collected (MAXBUF >= 256 ).

				FILES

file.s19	object file output
file.sym        symbol file output
STDOUT		listing and errors

			IMPLEMENTATION NOTES

This is a classic 2-pass assembler.  Pass 1 establishes the  symbol
table and pass 2 generates the code.  The assembler was compiled using
Microsoft Quick C Version 2.01, using the small memory model (64K code,
64K data).  This assembler is derived from the 8-bit cross assemblers
for the 6809/5/4/1 family.

				BUGS
This assembler is under continuing development. There is no way to
specify immediate values greater than 32-bits.  This makes it
inconvenient to use immediate values in double,extended or packed
floating point instructions.

Floating point format constants (e.g. 1.234E-5) are not recognized.
